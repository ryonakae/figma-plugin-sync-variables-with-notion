# プロジェクトのコーディング規約と開発ガイドライン

## 技術スタック (Tech Stack)

主要技術:
- TypeScript 5.8.2
- Preact 10.26.4 (軽量な React 互換ライブラリ)
- Figma Plugin SDK 3.2.1
- Tailwind CSS 4.0.13 (スタイリング)
- Zustand 5.0.3 (状態管理)
- Biome 1.9.4 (リンター・フォーマッター)

補助ライブラリ:
- @create-figma-plugin/ui 3.2.1 (Figma プラグイン用 UI コンポーネント)
- @create-figma-plugin/utilities 3.2.1 (Figma プラグイン用ユーティリティ)
- @tanstack/react-virtual 3.13.3 (仮想化リスト)
- react-use 17.6.0 (ユーティリティフック)
- tailwind-merge 3.0.2 (Tailwind クラスの結合)

## コーディング規約 (Coding Conventions)

- **TypeScript**: 厳格な型付けを使用し、`any`型の使用を避ける
- **コンポーネント**: 関数コンポーネントと React Hooks を使用する
- **スタイリング**: Tailwind CSS クラスを使用し、必要に応じて twMerge / twJoin でクラス名を条件付きで結合する
- **状態管理**: 小規模な状態には React Hooks、グローバル状態には Zustand を使用する
- **命名規則**:
  - コンポーネント: PascalCase (例: `Header.tsx`, `AccordionContent.tsx`)
  - ユーティリティ関数: camelCase
  - 定数: UPPER_SNAKE_CASE
  - ファイル名: PascalCase（コンポーネント）、camelCase（その他）

## フォーマット規則 (Formatting Rules)

- **インデント**: スペース 2 つ
- **引用符**: シングルクォート (`'`)
- **セミコロン**: 必要な場合のみ使用
- **末尾カンマ**: 常に使用
- **アロー関数**: 引数が 1 つの場合は括弧を省略可能

## コンポーネント設計 (Component Design)

- 単一責任の原則に従う
- 必要に応じてコンポーネントを分割し、再利用性を高める
- props には適切な型定義を行う
- コンポーネントの意図を明確にするコメントを記述する

## パフォーマンス最適化 (Performance Optimization)

- 不必要な再レンダリングを避ける
- 大きなコンポーネントは適切に分割する
- 画像には`FadeInImage`コンポーネントを使用してローディング体験を向上させる

## コードレビュー基準 (Code Review Criteria)

- 型安全性が確保されているか
- コードの可読性が高いか
- 既存のコード規約に従っているか
- パフォーマットルールが適用されているか
- 適切なコメントが記述されているか
